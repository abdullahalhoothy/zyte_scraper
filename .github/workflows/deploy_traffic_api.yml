name: Deploy Traffic API to VPS

on:
  # push:
  #   branches: [ main, master ]
  workflow_dispatch:

env:
  PROJECT_DIR: /opt/traffic_api

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check and install Docker on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            echo "üîç Checking Docker installation..."
            
            if ! command -v docker &> /dev/null; then
              echo "üê≥ Docker not found. Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
              rm get-docker.sh
              echo "‚úÖ Docker installed successfully"
            else
              echo "‚úÖ Docker is already installed"
              docker --version
            fi

      - name: Check and install Docker Compose on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            echo "üîç Checking Docker Compose installation..."
            
            if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
              echo "üê≥ Docker Compose not found. Installing Docker Compose..."
              
              # Install Docker Compose v2 (recommended)
              DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
              sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              
              # Create symlink for docker compose (v2)
              sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
              
              echo "‚úÖ Docker Compose installed successfully"
              docker-compose --version
            else
              echo "‚úÖ Docker Compose is already installed"
              # Try both commands for compatibility
              docker-compose --version || docker compose version
            fi

      - name: Setup project directory on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            sudo mkdir -p ${{ env.PROJECT_DIR }}/{data,static,logs}
            sudo chown -R ${{ secrets.VPS_USERNAME }}:${{ secrets.VPS_USERNAME }} ${{ env.PROJECT_DIR }}
            sudo chmod -R 755 ${{ env.PROJECT_DIR }}

      - name: Copy project files to VPS
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "."
          target: ${{ env.PROJECT_DIR }}

      - name: Create environment file on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ${{ env.PROJECT_DIR }}
            
            # Create .env file if it doesn't exist
            if [ ! -f .env ]; then
              cat > .env << EOF
              JWT_SECRET=${{ secrets.JWT_SECRET }}
              ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
              RATE_LIMIT=${{ secrets.RATE_LIMIT || '10/minute' }}
              SELENIUM_PROXY=${{ secrets.SELENIUM_PROXY || '' }}
              ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS || 'localhost,127.0.0.1' }}
              EOF
              echo "‚úÖ Created .env file"
            else
              echo "‚úÖ .env file already exists"
            fi

      - name: Deploy application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.PROJECT_DIR }}
            
            echo "üîÑ Stopping existing containers..."
            # Try both docker-compose and docker compose for compatibility
            docker-compose down --remove-orphans || docker compose down --remove-orphans
            
            echo "üèóÔ∏è Building new images..."
            docker-compose build --no-cache --pull || docker compose build --no-cache --pull
            
            echo "üöÄ Starting services..."
            docker-compose up -d || docker compose up -d
            
            echo "‚è≥ Waiting for services to be healthy..."
            sleep 30
            
            echo "üîç Checking service status..."
            docker-compose ps || docker compose ps

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ${{ env.PROJECT_DIR }}
            
            # Use whichever compose command works
            COMPOSE_CMD="docker-compose"
            if ! command -v docker-compose &> /dev/null; then
              COMPOSE_CMD="docker compose"
            fi
            
            # Check if API container is running
            API_STATUS=$($COMPOSE_CMD ps api | grep -c "Up" || true)
            if [ "$API_STATUS" -eq 1 ]; then
              echo "‚úÖ API container is running"
            else
              echo "‚ùå API container is not running"
              $COMPOSE_CMD logs api
              exit 1
            fi
            
            # Check if Selenium Hub is running
            HUB_STATUS=$($COMPOSE_CMD ps selenium-hub | grep -c "Up" || true)
            if [ "$HUB_STATUS" -eq 1 ]; then
              echo "‚úÖ Selenium Hub is running"
            else
              echo "‚ùå Selenium Hub is not running"
              $COMPOSE_CMD logs selenium-hub
              exit 1
            fi
            
            # Test API health endpoint
            echo "üß™ Testing API connectivity..."
            if curl -f -s http://localhost:8000/health > /dev/null || 
               curl -f -s http://localhost:8000/docs > /dev/null || 
               curl -f -s http://localhost:8000/ > /dev/null; then
              echo "‚úÖ API is responding"
            else
              echo "‚ö†Ô∏è  API health check failed, but deployment completed"
              echo "Checking API logs:"
              $COMPOSE_CMD logs api --tail=10
            fi

      - name: Clean up old images
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "üßπ Cleaning up unused Docker resources..."
            docker image prune -f
            docker system prune -f --volumes

      - name: Send deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "üéâ Deployment completed successfully!"
            # Add success notification here
          else
            echo "‚ùå Deployment failed!"
            # Add failure notification here
          fi
